// Generated by CoffeeScript 1.10.0
var ImgCtl, Utils, fs, imagemin, path, through2, vfs;

fs = require('fs');

path = require('path');

vfs = require('vinyl-fs');

Utils = require('../utils');

imagemin = require('imagemin-pngquant');

through2 = require('through2');

ImgCtl = (function() {
  function ImgCtl(opts) {
    this.opts = opts;
    this.hashLen = this.opts.hashLen;
    this.imgSrcPath = this.opts.srcPath + 'img';
    this.imgDebugPath = this.opts.debugPath + 'img';
    this.imgDistPath = this.opts.distPath + 'img';
    this.imgMapFile = this.opts.mapPath + 'imgmap.json';
    this.map = {};
  }

  ImgCtl.prototype._setDistPath = function() {
    var _this;
    _this = this;
    return through2.obj(function(file, enc, callback) {
      var _distName, _distPath, _hash, _imgContent, _name, _parse;
      _name = file.relative.replace(/\\\\/g, '/').replace(/\\/g, '/');
      _imgContent = file.contents.toString();
      _hash = Utils.md5(_imgContent);
      _parse = path.parse(file.path);
      _distPath = Utils.setDistPath(_parse, _hash);
      _distName = path.join(path.dirname(_name), path.basename(_distPath));
      _this.map[_name] = {};
      _this.map[_name].hash = _hash;
      _this.map[_name].distname = _distName.replace(/\\\\/g, '/').replace(/\\/g, '/');
      file.path = _distPath;
      return callback(null, file);
    });
  };

  ImgCtl.prototype.copyImgs = function(cb) {
    var _imgDebugPath, _imgDistPath, _imgSrcPath, _this;
    _this = this;
    _imgSrcPath = _this.imgSrcPath;
    _imgDebugPath = _this.imgDebugPath;
    _imgDistPath = _this.imgDistPath;
    return vfs.src([_imgSrcPath + '/*.{gif,jpg,png,svg}', _imgSrcPath + '/**/*.{gif,jpg,png,svg}']).pipe(imagemin({
      quality: '65-80',
      speed: 4
    })()).pipe(vfs.dest(_imgDebugPath)).pipe(vfs.dest(_imgDistPath)).pipe(_this._setDistPath()).pipe(vfs.dest(_imgDistPath)).on('end', function() {
      return cb && cb();
    });
  };

  ImgCtl.prototype.init = function(cb) {
    var _this;
    _this = this;
    return _this.copyImgs(function() {
      global.Cache['imgMap'] = _this.map;
      Utils.updateMap(_this.map, 'imgMap');
      Utils.saveMapFile('imgMap');
      return cb && cb();
    });
  };

  return ImgCtl;

})();

module.exports = ImgCtl;
