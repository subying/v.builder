// Generated by CoffeeScript 1.10.0

/**
 * @fileOverview  Basic tools
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var Tools, _, _url, color, crypto, fs, gutil, http, https, opts, path, uglify,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

_ = require('lodash');

_url = require('url');

crypto = require('crypto');

http = require('http');

https = require('https');

uglify = require('uglify-js');

gutil = require('gulp-util');

color = gutil.colors;

opts = global.Cache['gOpts'];

Tools = {};

Tools.md5 = function(source) {
  var _buf, _str;
  _buf = new Buffer(source);
  _str = _buf.toString("binary");
  return crypto.createHash('md5').update(_str, 'utf8').digest('hex');
};

Tools.errrHandler = function(e) {
  gutil.beep();
  gutil.beep();
  return gutil.log(e);
};


/*
 * @fileOverview makedir
 */

Tools.mkdirsSync = function(dirpath, mode) {
  if (fs.existsSync(dirpath)) {
    return true;
  } else {
    if (Tools.mkdirsSync(path.dirname(dirpath), mode)) {
      fs.mkdirSync(dirpath, mode);
      return true;
    }
  }
};


/*
 * @fileOverview makedirs
 */

Tools.mkdirs = function(dirpath, mode, callback) {
  return fs.exists(dirpath, function(exists) {
    if (exists) {
      return callback(exists);
    } else {
      return mkdirs(path.dirname(dirpath), mode, function() {
        return fs.mkdir(dirpath, mode, callback);
      });
    }
  });
};


/*
 * @fileOverview obj mixin function
 * @Example
 * food = {'key':'apple'}
 * food2 = {'name':'banana','type':'fruit'}
 * console.log objMixin(food2,food)
 * console.log objMixin(food,food2)
 */

Tools.mix = _.partialRight(_.assign, function(a, b) {
  var val;
  val = typeof a === 'undefined' ? b : a;
  return val;
});

Tools.getFileSync = function(file, encoding) {
  var _encoding, fileCon, stats;
  _encoding = encoding || 'utf8';
  fileCon = '';
  if (fs.existsSync(file)) {
    stats = fs.statSync(file);
    if (stats.isFile()) {
      fileCon = fs.readFileSync(file, _encoding);
    }
  }
  return fileCon;
};

Tools.getJSONSync = function(file) {
  var data, e, error1, fileCon;
  fileCon = Tools.getFileSync(file);
  data = {};
  if (fileCon) {
    fileCon = fileCon.replace(/\/\/[^\n]*/g, '');
    try {
      data = JSON.parse(fileCon);
    } catch (error1) {
      e = error1;
      console.log(e);
    }
  }
  return data;
};

Tools.isEmptyObject = function(obj) {
  var name;
  for (name in obj) {
    return false;
  }
  return true;
};

Tools.writeFile = function(file, source, isNotLog) {
  var name;
  name = path.basename(file);
  if (fs.existsSync(file) && Tools.md5(Tools.getFileSync(file)) === Tools.md5(source)) {
    return false;
  }
  Tools.mkdirsSync(path.dirname(file));
  fs.writeFileSync(file, source, 'utf8');
  return isNotLog || gutil.log("'" + gutil.colors.cyan(name) + "'", "build success.");
};

Tools.minifyJs = function(source) {
  var mangled;
  mangled = uglify.minify(source, {
    fromString: true
  });
  return mangled.code;
};

Tools.getMap = function(type) {
  var _ctl, _file, _map, _name, _source, _this, e, error1, error2;
  _this = Tools;
  _map = {};
  _name = type === "css" || type === "img" || type === "js" ? type + "Map" : "" + type;
  _file = opts.mapPath + _name.toLowerCase() + '.json';
  if (!fs.existsSync(_file)) {
    _this.writeFile(_file, '{}');
  } else {
    _source = fs.readFileSync(_file);
    try {
      _map = JSON.parse(_source, 'utf8');
      global.Cache[_name] = _map;
    } catch (error1) {
      e = error1;
      try {
        _source = _source.toString().replace(/<<<<<<<([\s\S]*?)>>>>>>>\s*\w*/g, '');
        _map = global.Cache[_name] = JSON.parse(_source) || {};
        _this.writeFile(_file, _source);
      } catch (error2) {
        e = error2;
        global.Cache[_name] = {};
        switch (_name) {
          case 'imgMap':
            _ctl = require('../imgCtl');
            new _ctl(opts).init();
            break;
          case 'cssMap':
            _ctl = require('../cssCtl');
            new _ctl(opts).init();
            break;
          default:
            global.Cache[_name] = {};
        }
        _map = _.assign(_map, global.Cache[_name]);
      }
    }
  }
  return _map;
};

Tools.updateMap = function(obj, mapName) {
  if (_.has(global.Cache, mapName)) {
    return _.assign(global.Cache[mapName], obj);
  }
};

Tools.saveMapFile = function(name) {
  var _data, _file, _map, _name, e, error1;
  _name = name;
  _file = opts.mapPath + _name.toLowerCase() + '.json';
  _map = {};
  try {
    _map = JSON.parse(fs.readFileSync(_file), 'utf8');
  } catch (error1) {
    e = error1;
    console.log(e);
  }
  _map = _.assign(_map, global.Cache[_name]);
  _data = JSON.stringify(_map, null, 4);
  return Tools.writeFile(_file, _data);
};

Tools.saveCache = function() {
  var _cache;
  _cache = global.Cache;
  delete _cache.gOpts;
  return Tools.writeFile(opts.mapPath + 'cache.json', JSON.stringify(_cache, null, 0));
};

Tools.replaceImg = function(source) {
  var file_source, imgMap, imgPath, imgReg;
  Tools.getMap('img');
  imgPath = Tools.getStaticPath() + 'img/';
  imgMap = global.Cache['imgMap'];
  imgReg = /<img[\s\S]*?[^(src)]src=('|")([^'|^"]*)('|")/g;
  file_source = source.replace(imgReg, function(str) {
    var key, map, val;
    map = '';
    str.replace(/src=('|")([^'|^"]*)('|")/, function($1) {
      return map = $1.replace(/^src=/, '').replace(/(\'|\")|(\'|\"$)/g, '');
    });
    if (map.indexOf('/img/') !== 0 || map.indexOf('http://') === 0 || map.indexOf('data:') === 0 || map.indexOf('/<?php/') !== -1) {
      return str;
    } else {
      key = map.replace(/(^\'|\")|(\'|\"$)/g, '').split('img/')[1];
      val = imgPath + (_.has(imgMap, key) && opts.env !== 'local' ? imgMap[key].distname : key + '?=t' + String(new Date().getTime()).substr(0, 8));
      return str.replace(map, val);
    }
  });
  return file_source;
};

Tools.htmlMinify = function(source) {
  var s;
  s = source.replace(/\/\*([\s\S]*?)\*\//g, '').replace(/<!--([\s\S]*?)-->/g, '').replace(/^\s+$/g, '').replace(/\n/g, '').replace(/\t/g, '').replace(/\r/g, '').replace(/\n\s+/g, ' ').replace(/\s+/g, ' ').replace(/>([\n\s]*?)</g, '><');
  return s;
};

Tools.isWin = function() {
  return process.platform === "win32";
};

Tools.tranFilePath = function(filePath) {
  var _file;
  _file = filePath || "";
  if (Tools.isWin() && _file) {
    _file = _file.replace(/\\\\/g, '/').replace(/\\/g, '/');
  }
  return _file;
};


/*
 * build the three part's js libs paths
 */

Tools.buildReqPaths = function(cb) {
  var _cb, _libs, _reqPathsFile, err, error1, filePath;
  _cb = cb || function() {};
  if (_.has(global.Cache, 'jsLibs')) {
    return false;
  }
  _libs = {};
  _reqPathsFile = path.join(opts.mapPath, 'req_paths.json');
  try {
    _libs = JSON.parse(fs.readFileSync(_reqPathsFile, 'utf8'));
  } catch (error1) {
    err = error1;
    Tools.writeFile(_reqPathsFile, "{}");
  }
  filePath = opts.srcPath + 'js/vendor/';
  fs.readdirSync(filePath).forEach(function(v) {
    var _path;
    _path = path.join(filePath, v);
    if (fs.statSync(_path).isDirectory()) {
      return fs.readdirSync(_path).forEach(function(f) {
        var _file;
        _file = path.join(_path, f);
        if (fs.existsSync(_file) && f.indexOf('.') !== 0 && f.indexOf('.js') !== -1) {
          _file = Tools.tranFilePath(_file);
          return _libs[v] = _file.split('/js/')[1].replace(/\.js$/, '');
        }
      });
    }
  });
  global.Cache['jsLibs'] = _libs;
  return _cb();
};

Tools.buildReqCfg = function(cb) {
  var _reqShimFile, baseUrl, cdnDomain, curHash, e, error1, file, jsLibPaths, key, newPaths, reqCfg, reqCfgStr, reqShim, val;
  Tools.getMap("jsHash");
  if (!_.has(global.Cache, 'jsLibs')) {
    Tools.buildReqPaths();
  }
  jsLibPaths = global.Cache['jsLibs'];
  reqShim = {};
  _reqShimFile = path.join(opts.mapPath, 'req_shim.json');
  try {
    reqShim = JSON.parse(fs.readFileSync(_reqShimFile, 'utf8'));
  } catch (error1) {
    e = error1;
    Tools.writeFile(_reqShimFile, "{}");
  }
  newPaths = {};
  for (key in jsLibPaths) {
    val = jsLibPaths[key];
    if (key !== 'require') {
      newPaths[key] = val;
    }
  }
  cdnDomain = opts.cdnDomain;
  if (opts.env === 'www') {
    cdnDomain = "local." + cdnDomain;
  } else {
    cdnDomain = cdnDomain.replace(/(test|rc)/, 'local');
  }
  baseUrl = cdnDomain + path.join(opts.debugPath, 'js');
  reqCfg = {
    baseUrl: baseUrl.replace('\\', '/'),
    paths: newPaths,
    shim: reqShim
  };
  global.Cache['reqCfg'] = reqCfg;
  reqCfgStr = "require.config(" + (JSON.stringify(reqCfg, null, 2)) + ");";
  curHash = Tools.md5(reqCfgStr);
  file = path.join(opts.debugPath, "js/reqcfg.js");
  global.Cache['jsHash']['reqcfg.js'] = curHash;
  Tools.saveMapFile('jsHash');
  Tools.writeFile(file, reqCfgStr);
  return cb && cb();
};

Tools.getStaticPath = function() {
  var _debugPath, _distPath, _env, _isDebug, _staticPath;
  _isDebug = !!opts.isDebug;
  _env = opts.env;
  _debugPath = opts.cdnDomain + opts.debugPath;
  _distPath = opts.cdnDomain + opts.distPath;
  _staticPath = '';
  if (_env !== 'local' && _env !== 'dev') {
    _staticPath = _distPath;
  } else {
    if (_env === 'local' && _isDebug) {
      _staticPath = _distPath;
    } else {
      _staticPath = _debugPath;
    }
  }
  return _staticPath;
};

Tools.getGloabVars = function() {
  var GLOBAL_VARS, _staticPath;
  _staticPath = Tools.getStaticPath();
  GLOBAL_VARS = "var STATIC_PATH='" + _staticPath + "'," + opts.spaceName + "=window['" + opts.spaceName + "']={},_VM_=window['_VM_']={};" + opts.spaceName + ".getStaticUri={img:function(n){return STATIC_PATH+'img/'+n;},css:function(n){return STATIC_PATH+'css/'+n;},js:function(n){return STATIC_PATH+'js/'+n}};";
  return "<script>" + GLOBAL_VARS + "</script>";
};


/**
 * 构造 css 资源路径
 * @param {string} cssList css列表
 * @example
 * cssList = 'main.css,index.css'
 * init_css(cssList)
 */

Tools.init_css = function(cssList) {
  var _cssArr, _cssLinks, _cssMap, _cssPath, _env, _isDebug, _timestamp, _ver;
  if (!_.has(global.Cache, "cssMap")) {
    Tools.getMap('css');
  }
  _cssMap = global.Cache['cssMap'];
  _env = opts.env;
  _ver = opts.ver;
  _isDebug = !!opts.isDebug;
  _cssPath = Tools.getStaticPath() + 'css';
  _cssArr = cssList.split(',');
  _cssLinks = '';
  _timestamp = String(new Date().getTime()).substr(0, 8);
  _cssArr.forEach(function(key) {
    var val;
    if (key.indexOf(/\.css$/) === -1) {
      key = key + '.css';
    }
    if (_env !== 'local' && _env !== 'dev') {
      val = _.has(_cssMap, key) ? _cssMap[key].distname + ("?v=" + _ver) : key + "?v=" + _ver + "&t=" + _timestamp;
    } else {
      if (_isDebug && _env === 'local' && _.has(_cssMap, key)) {
        val = _cssMap[key].distname + ("?v=" + _ver);
      } else {
        val = key + "?v=" + _ver + "&t=" + _timestamp;
      }
    }
    return _cssLinks += "<link href='" + _cssPath + "/" + val + "' rel='stylesheet' type='text/css' />";
  });
  return _cssLinks + Tools.getGloabVars();
};


/**
 * 构造 js 资源路径
 * @param {string} jsList js列表
 * @example
 * jsList = 'sb.corelibs.js,sb.app_index.js,piwik.js'
 * init_js(jsList)
 */

Tools.init_js = function(jsList) {
  var _buildDistLink, _buildSrcLink, _coreJsName, _env, _isDebug, _jsArr, _jsLinks, _jsMap, _jsPath, _reqJs, _timestamp, _ver;
  _isDebug = !!opts.isDebug;
  _env = opts.env;
  _ver = opts.ver;
  _jsLinks = "";
  if (!_.has(global.Cache, "jsMap")) {
    Tools.getMap('js');
  }
  _jsMap = global.Cache['jsMap'];
  _jsPath = Tools.getStaticPath() + 'js';
  _coreJsName = opts.prefix + '.' + opts.coreJs.name + '.js';
  _jsArr = jsList.split(',');
  _timestamp = String(new Date().getTime()).substr(0, 8);
  _reqJs = "<script src='" + _jsPath + "/vendor/require/require.js?v=" + _ver + "'></script>";
  if (indexOf.call(opts.coreJs.mods, "Zepto") >= 0 || indexOf.call(opts.coreJs.mods, "zepto") >= 0) {
    _reqJs += "<script src='" + _jsPath + "/vendor/Zepto/zepto.js?v=" + _ver + "'></script>";
  } else {
    _reqJs += "<script src='" + _jsPath + "/vendor/jquery/jquery.js?v=" + _ver + "'></script>";
  }
  _reqJs += "<script src='" + _jsPath + "/reqcfg.js?v=" + _ver + "&t=" + _timestamp + "'></script>";
  _buildSrcLink = function(key) {
    var _link, _modName, val;
    _link = '';
    if (key.indexOf(opts.prefix) !== 0) {
      val = key + "?v=" + _ver + "&t=" + _timestamp;
      _link += "<script src='" + _jsPath + "/" + val + "'></script>";
    } else {
      if (key === _coreJsName) {
        _link += _reqJs;
      } else {
        _modName = key.replace(opts.prefix + ".", '').replace('.js', '').replace(/\_/g, '/');
        _link += "<script>require(['" + _modName + "'])</script>";
      }
    }
    return _link;
  };
  _buildDistLink = function(key) {
    var _link, val;
    _link = '';
    val = _.has(_jsMap, key) ? _jsMap[key].distname + ("?v=" + _ver) : key + "?v=" + _ver + "&t=" + _timestamp;
    _link += "<script src='" + _jsPath + "/" + val + "'></script>";
    return _link;
  };
  _jsArr.forEach(function(key) {
    if (key.indexOf(/\.js$/) === -1) {
      key = key + '.js';
    }
    if (_env !== 'local' && _env !== 'dev') {
      return _jsLinks += _buildDistLink(key);
    } else {
      if (_isDebug && _env === 'local') {
        return _jsLinks += _buildDistLink(key);
      } else {
        return _jsLinks += _buildSrcLink(key);
      }
    }
  });
  return _jsLinks;
};

Tools.init_img = function(imgName) {
  var _env, _imgMap, _imgPath, _isDebug, _this, _timestamp, _val, _ver;
  _this = Tools;
  _env = opts.env;
  _ver = opts.ver;
  _isDebug = !!opts.isDebug;
  if (!_.has(global.Cache, "imgMap")) {
    _this.getMap('img');
  }
  _imgMap = global.Cache['imgMap'];
  _imgPath = _this.getStaticPath() + 'img';
  _timestamp = String(new Date().getTime()).substr(0, 8);
  _val = _env !== 'local' && _env !== 'dev' && !_isDebug && _.has(_imgMap, imgName) ? _imgMap[imgName].distname + ("?v=" + _ver) : imgName + "?v=" + _ver + "&t=" + _timestamp;
  return _imgPath + "/" + _val;
};

Tools.mapToViewPath = function(cb) {
  var _cb, _distPaths, _mapPath, _maps, _outPath, key, val;
  _cb = cb || function() {};
  _mapPath = opts.mapPath;
  _outPath = opts.viewPath;
  _maps = ['cssmap', 'jsmap', 'imgmap'];
  _distPaths = [];
  if (typeof _outPath === 'object') {
    for (key in _outPath) {
      val = _outPath[key];
      _distPaths.push(val);
    }
  } else if (typeof _outPath === 'string') {
    _distPaths.push(_outPath);
  }
  _maps.forEach(function(key) {
    var _hash, _jsonData, _name, _phpArr, _phpStr, error, error1, file, name, ref;
    try {
      file = _mapPath + key + '.json';
      _jsonData = fs.readFileSync(file, 'utf8');
      _phpArr = [];
      ref = JSON.parse(_jsonData);
      for (name in ref) {
        val = ref[name];
        _name = val.distname;
        _hash = val.hash;
        _phpArr.push("'" + name + "' => array('distname' => '" + _name + "', 'hash' => '" + _hash + "')");
      }
      _phpStr = '<?php' + '\r\n' + 'return array(' + _phpArr + ');' + '\r\n' + '?>';
      return _distPaths.forEach(function(v) {
        var mapFile;
        mapFile = path.join(v, 'map', key);
        Tools.writeFile(mapFile + ".json", _jsonData, 0);
        return Tools.writeFile(mapFile + ".php", _phpStr, 0);
      });
    } catch (error1) {
      error = error1;
    }
  });
  gutil.log(color.green("Map done!"));
  return _cb();
};

Tools.setDistPath = function(parse, hash) {
  parse.base = parse.name + "." + hash.substring(0, opts.hashLen) + parse.ext;
  return path.format(parse);
};

module.exports = Tools;
