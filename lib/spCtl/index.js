// Generated by CoffeeScript 1.10.0
var SpBase, SpCtl, color, fs, gutil, path, sprite, vfs,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

path = require('path');

vfs = require('vinyl-fs');

sprite = require('gulp.spritesmith');

gutil = require('gulp-util');

color = gutil.colors;

SpBase = require('./spBase');

SpCtl = (function(superClass) {
  extend(SpCtl, superClass);

  function SpCtl() {
    this.init = bind(this.init, this);
    this.outputOne = bind(this.outputOne, this);
    return SpCtl.__super__.constructor.apply(this, arguments);
  }

  SpCtl.prototype.replaceName = function(source) {
    var _source;
    _source = source.toString();
    return _source;
  };


  /*
   * PNGs combine to one image and build LESS demo
   */

  SpCtl.prototype.outputOne = function(floder, cb) {
    var _floder, _imgOutPath, _method, _spBgUrl, _srcPath, _styleOutPath, _this, error, error1, opts, spriteData;
    _this = this;
    _floder = floder;
    _srcPath = this.srcPath;
    _imgOutPath = this.imgOutPath;
    _styleOutPath = this.styleOutPath;
    _spBgUrl = '../img/sprite/' + _floder + '.png';
    _method = this.getBuildMethod(_floder);
    opts = {
      algorithm: _method,
      padding: 10,
      imgName: _floder + ".png",
      cssName: _floder + ".less",
      cssFormat: 'css',
      imgPath: _spBgUrl,
      cssOpts: {
        cssSelector: function(item) {
          return ".icon-" + _floder + "-" + item.name + "()";
        }
      }
    };
    spriteData = vfs.src(path.join(_srcPath, _floder, '*.png')).pipe(sprite(opts));
    try {

      /*  
          修复雪碧图合并失败
       */

      /* 
      spriteData.img.on 'data',(imgRes)->
          _imgPath = "#{_imgOutPath}/#{imgRes.path}"
          _imgSource = imgRes.contents
          fs.writeFileSync _imgPath, imgRes.contents, 'utf8'
       */
      spriteData.img.pipe(vfs.dest(_imgOutPath));
      return spriteData.css.on('data', function(stylRes) {
        var _contents, _stylPath, _stylSource;
        _stylPath = _styleOutPath + "/" + stylRes.path;
        _stylSource = stylRes.contents;
        _contents = _this.replaceName(stylRes.contents);
        fs.writeFileSync(_stylPath, _contents, 'utf8');
        return cb && cb();
      });
    } catch (error1) {
      error = error1;
      gutil.log(error);
      return cb && cb();
    }
  };


  /**
  * 生成雪碧图和雪碧图map
  * @param  _type 1:所有未生成LESS或PNG的目录  2: 未生成PNG的目录
  * @callback 返回带上最新的雪碧图源文件map
   */

  SpCtl.prototype.init = function(type, cb) {
    var _cb, _newFolders, _num, _this, _type, folder, i, len, results, total;
    if (typeof type === 'function') {
      _cb = type;
      _type = 0;
    } else {
      _type = type || 0;
      _cb = cb || function() {};
    }
    _this = this;
    _newFolders = [];
    switch (_type) {
      case 1:
        _newFolders = _this.getAllNewBuildList();
        break;
      case 2:
        _newFolders = _this.getNewBuildPngFolders();
        break;
      default:
        _newFolders = _this.getSpSrcFolders();
    }
    total = _newFolders.length;
    _num = 0;
    if (total > 0) {
      gutil.log('Starting', '\'' + color.cyan('Sprites') + '\'...');
      results = [];
      for (i = 0, len = _newFolders.length; i < len; i++) {
        folder = _newFolders[i];
        results.push(_this.outputOne(folder, function() {
          _num++;
          _num % 10 === 5 && gutil.log('Waitting...');
          if (_num === total) {
            _this.setSpMap(function() {
              return gutil.log('\'' + color.cyan('Sprites') + '\'', 'build success.');
            });
            return _cb();
          }
        }));
      }
      return results;
    } else {
      return _cb();
    }
  };

  return SpCtl;

})(SpBase);

module.exports = SpCtl;
