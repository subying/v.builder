// Generated by CoffeeScript 1.10.0
var INC_RE, INC_RE_STR, Main, NOBASE_RE, Utils, baseDir, configName, ejs, fs, include, inited, path, slice, suffix, toString, url;

ejs = require('ejs');

url = require('url');

fs = require('fs');

path = require('path');

Utils = require('../utils');

INC_RE_STR = '\\(\\s*(?:"|\')([\\w\\/.-]*\\s*)(?:"|\')\\s*(?:,\\s*(\\{[\\s\\S]*?\\}))?\\);?';

NOBASE_RE = /^\.{0,2}\//;

suffix = "html";

toString = Object.prototype.toString;

slice = Array.prototype.slice;

include = "@@include";

INC_RE = null;

baseDir = null;

inited = false;

configName = null;

Utils.getFileString = function(filepath) {
  if (/(?:\/|\\)$/.test(filepath) || !fs.existsSync(filepath)) {
    console.log("\x1B[31mfile is not exist：" + filepath + "\x1B[0m");
    return null;
  } else {
    return fs.readFileSync(filepath).toString();
  }
};

Utils.deepCopy = function(obj) {
  var key, result, type, val;
  result = {};
  type = toString.call(obj);
  if (!obj || (type === "[object RegExp]") || typeof obj !== "object") {
    return obj;
  }
  if (type === "[object Array]") {
    return slice.call(obj);
  }
  for (key in obj) {
    val = obj[key];
    result[key] = Utils.deepCopy(val);
  }
  return result;
};

Main = {
  config: function(options) {
    var k, ref, v;
    options = options || {};
    if (options.ejs) {
      ref = options.ejs;
      for (k in ref) {
        v = ref[k];
        ejs[k] = v;
      }
    }
    suffix = options.suffix || suffix;
    include = options.include || include;
    baseDir = options.baseDir;
    configName = options.configName || "config.js";
    INC_RE = new RegExp("([ \\t]*)" + include + INC_RE_STR, 'g');
    return inited = true;
  },
  combine: function(content, filePath, opt) {
    var _this, configFile, configPath, delimiter, e, error, fileUrl, result, templateFile;
    _this = this;
    fileUrl = null;
    templateFile = null;
    configPath = path.dirname(filePath) + path.sep + configName;
    if (fs.existsSync(configPath)) {
      delimiter = ejs.delimiter || "%";
      configFile = "<" + delimiter + fs.readFileSync(configPath).toString() + delimiter + ">";
      content = configFile + content;
    }
    opt = opt || {};
    try {
      result = ejs.render(content, opt);
    } catch (error) {
      e = error;
      console.log("\x1B[31mbuild " + filePath + " fail\x1B[0m");
      console.log("\x1B[31mEjs error：" + e.message + "\x1B[0m");
      return;
    }
    result = result.replace(INC_RE, function($1, $2, $3, $4) {
      var error1, key, lines, msg, nobj, obj, space, val;
      msg = $1;
      space = $2;
      fileUrl = $3;
      obj = $4 || "{}";
      if (!(typeof baseDir === "string") || NOBASE_RE.test(fileUrl)) {
        fileUrl = url.resolve(filePath, fileUrl);
      } else {
        fileUrl = baseDir + "/" + fileUrl;
      }
      fileUrl += (new RegExp("." + suffix + "$")).test(fileUrl) ? "" : ("." + suffix);
      if (!(templateFile = Utils.getFileString(fileUrl))) {
        return msg;
      }
      try {
        obj = eval("(" + obj.replace(/\r\n/, '') + ")");
      } catch (error1) {
        e = error1;
        obj = {};
      }
      nobj = Utils.deepCopy(opt);
      for (key in obj) {
        val = obj[key];
        if (key.indexOf('css') === 0) {
          nobj[key] = Utils.init_css(val);
        } else if (key.indexOf('js') === 0) {
          nobj[key] = Utils.init_js(val);
        } else if (key.indexOf('img') === 0) {
          nobj[key] = Utils.init_img(val);
        } else {
          nobj[key] = val;
        }
      }
      result = _this.combine(templateFile, fileUrl, nobj);
      if (result) {
        lines = result.split(/\r?\n/g);
        result = space + lines.join("\n" + space);
      }
      return result;
    });
    return result;
  },
  parse: function(filepath, options, content) {
    var _this;
    _this = this;
    if (!inited) {
      _this.config();
    }
    if (arguments.length === 2 && (typeof options === "string")) {
      content = options;
      options = {};
    }
    content = content || Utils.getFileString(filepath);
    options = options || {};
    if (!content) {
      return "";
    }
    return _this.combine(content, filepath, options);
  }
};

module.exports = Main;
